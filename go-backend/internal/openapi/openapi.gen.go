// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Conversation defines model for Conversation.
type Conversation struct {
	Id    *string `json:"id,omitempty"`
	Users *[]User `json:"users,omitempty"`
}

// CreateUserRequestBody defines model for CreateUserRequestBody.
type CreateUserRequestBody struct {
	Name *string `json:"name,omitempty"`
}

// HealthCheck defines model for HealthCheck.
type HealthCheck struct {
	BuildingDb          *bool   `json:"building_db"`
	ImdbDataDownloading *bool   `json:"imdb_data_downloading"`
	Status              *string `json:"status,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Body       *string `json:"body,omitempty"`
	CreatedAt  *string `json:"created_at,omitempty"`
	FromUserId *string `json:"from_user_id,omitempty"`
	Id         *string `json:"id,omitempty"`
}

// User defines model for User.
type User struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody CreateUserRequestBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a conversation
	// (POST /api/v1/conversations)
	CreateConversation(ctx echo.Context) error
	// Get a conversation
	// (GET /api/v1/conversations/{id})
	GetConversation(ctx echo.Context, id string) error
	// Get a conversation messages
	// (GET /api/v1/conversations/{id}/messages)
	GetConversationMessages(ctx echo.Context, id string) error
	// Creates a user
	// (POST /api/v1/users)
	CreateUser(ctx echo.Context) error
	// Returns applications health
	// (GET /health)
	GetHealth(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateConversation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateConversation(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateConversation(ctx)
	return err
}

// GetConversation converts echo context to params.
func (w *ServerInterfaceWrapper) GetConversation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConversation(ctx, id)
	return err
}

// GetConversationMessages converts echo context to params.
func (w *ServerInterfaceWrapper) GetConversationMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConversationMessages(ctx, id)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/conversations", wrapper.CreateConversation)
	router.GET(baseURL+"/api/v1/conversations/:id", wrapper.GetConversation)
	router.GET(baseURL+"/api/v1/conversations/:id/messages", wrapper.GetConversationMessages)
	router.POST(baseURL+"/api/v1/users", wrapper.CreateUser)
	router.GET(baseURL+"/health", wrapper.GetHealth)

}
