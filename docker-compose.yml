version: '2'

services:
  frontend:
    build:
      context: frontend/.
      target: dev
    ports:
      - 3000:3000
    command: npm start
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    depends_on: 
      - api
    networks:
      - base
  api:
    build:
      context: go-backend/.
      target: api
    ports:
      - 3001:3000
    command: go run cmd/api/main.go
    volumes:
      - ./go-backend:/app
    networks:
      - base
    depends_on: 
      - pgbouncer
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://localhost:3000/health || exit 1
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  load:
    build:
      context: go-backend/.
      target: base
    command: go run cmd/loadCreator/main.go
    volumes:
      - ./go-backend:/app
    depends_on: 
      - api
    networks:
      - base

  postgres:
    image: postgres:15
    volumes:
      - db:/var/lib/postgresql/data
      - ./postgres.conf:/etc/postgresql.conf
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: messager
    networks:
      - base
    command: postgres -c config_file=/etc/postgresql.conf

  pgbouncer:
    image: docker.io/bitnami/pgbouncer
    ports:
      - 6432
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PASSWORD: postgres
      PGBOUNCER_AUTH_TYPE: trust
      PGBOUNCER_DATABASE: messager
    networks:
      - base
    depends_on:
      - postgres

  grafana:
    image: grafana/grafana
    ports:
      - 3002:3000
    networks:
      - base

  prometheus:
    image: prom/prometheus
    ports:
      - 9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - base

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/messager?sslmode=disable"
    networks:
      - base

volumes:
  db:
  node_modules:

networks:
  base:
